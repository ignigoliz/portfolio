<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Iñigo&#39;s Portfolio</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Iñigo&#39;s Portfolio</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Dec 2024 03:51:29 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Teenygrad Study Notes</title>
      <link>http://localhost:1313/posts/teenygrad-learning-notes/</link>
      <pubDate>Thu, 26 Dec 2024 03:51:29 +0100</pubDate>
      <guid>http://localhost:1313/posts/teenygrad-learning-notes/</guid>
      <description>&lt;p&gt;&lt;img
    src=&#34;http://localhost:1313/images/teenygrad-learning-notes/cover.png&#34; alt=&#34;(Cover image)&#34;
    
     style=&#34;width: 100%; max-width: 700px;&#34;
    /&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;What happens when you reduce a ML framework all the way to its bare bones? - You get &lt;a href=&#34;https://github.com/tinygrad/teenygrad&#34;&gt;&lt;strong&gt;teenygrad&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post, I want to dive into the source code of teenygrad to illustrate the software architecture behind some important concepts of ML-engines like backpropagation and computational graphs.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s true that you can go read the code directly (it&amp;rsquo;s not that difficult) but&amp;hellip; why not take a guided tour first? If you enjoyed Karpathy&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/watch?v=VMj-3S1tku0&#34;&gt;micrograd&lt;/a&gt;, you&amp;rsquo;ll like teenygrad.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Minimalistic EEPROM programmer</title>
      <link>http://localhost:1313/posts/amanuensis-eeprom-interface/</link>
      <pubDate>Tue, 10 Dec 2024 14:27:41 +0100</pubDate>
      <guid>http://localhost:1313/posts/amanuensis-eeprom-interface/</guid>
      <description>&lt;p&gt;&lt;img
    src=&#34;http://localhost:1313/images/amanuensis-eeprom-interface/amanuensis_header.png#center&#34; alt=&#34;(Amanuensis Header Art)&#34;
    
     style=&#34;width: 100%; max-width: 700px;&#34;
    /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h2&gt;
&lt;p&gt;A command-line tool to interact with a 28c256 256KB EEPROM, which is the one used in
&lt;a href=&#34;https://www.youtube.com/watch?v=LnzuMJLZRdU&amp;amp;list=PLowKtXNTBypFbtuVMUVXNR0z1mu7dp7eH&amp;amp;index=1&#34;&gt;Ben Eater&amp;rsquo;s 6502 pc&lt;/a&gt;.
Allows reading contents from the EEPROM and writing data to it.&lt;/p&gt;
&lt;p&gt;&lt;img
    src=&#34;http://localhost:1313/images/amanuensis-eeprom-interface/read_range_presentation.png#center&#34; alt=&#34;(Reading EEPROM preview)&#34;
    
     style=&#34;width: 100%; max-width: 700px;&#34;
    /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The command used to drive the EEPROM is&lt;code&gt;nuensis&lt;/code&gt;. It is named after the Amanuensis monks, which provided services as scribes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Check the project on &lt;a href=&#34;https://github.com/ignigoliz/amanuensis&#34;&gt;Github&lt;/a&gt; to make your own!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automatic Cat Feeder</title>
      <link>http://localhost:1313/posts/janus-cat-feeder/</link>
      <pubDate>Wed, 27 Nov 2024 12:36:05 +0100</pubDate>
      <guid>http://localhost:1313/posts/janus-cat-feeder/</guid>
      <description>&lt;p&gt;&lt;img
    src=&#34;http://localhost:1313/images/janus-cat-feeder/janus_header.png#center&#34; alt=&#34;(Janus header art)&#34;
    
     style=&#34;width: 100%; max-width: 500px;&#34;
    /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h2&gt;
&lt;p&gt;&lt;img
    src=&#34;http://localhost:1313/images/janus-cat-feeder/IMG_9965_2.gif#center&#34; alt=&#34;(Lilo getting her food)&#34;
    
     style=&#34;width: 100%; max-width: 350px;&#34;
    /&gt;
A camera-controlled cat feeder that only exposes the food when a certain pet is around.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;I have two cats: one is black and slim and the other is white and chubby. The black one is called Lilo. The white one, Coco.&lt;/p&gt;
&lt;p&gt;&lt;img
    src=&#34;http://localhost:1313/images/janus-cat-feeder/IMG_9967.jpg#center&#34; alt=&#34;(Lilo and Coco)&#34;
    
     style=&#34;width: 100%; max-width: 350px;&#34;
    /&gt;&lt;/p&gt;
&lt;p&gt;The problem is that Coco eats Lilo&amp;rsquo;s wet food. I&amp;rsquo;ve built an automatic pet feeder that only exposes the food when Lilo approaches, thus stopping Coco from eating it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Winter of Output</title>
      <link>http://localhost:1313/posts/winter-of-output/</link>
      <pubDate>Mon, 18 Nov 2024 19:07:28 +0100</pubDate>
      <guid>http://localhost:1313/posts/winter-of-output/</guid>
      <description>&lt;p&gt;&lt;img
    src=&#34;http://localhost:1313/images/DSCF1490.jpg#center&#34; alt=&#34;(Scandinavian winter landscape)&#34;
    
    
    /&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s November 18th. Winter is already making an appearance here in Scandinavia. My hands start to get cold when I bike home, the few leaves that remain in the trees are falling, and the darkness arrives before the workday is over. Recently, I quit my job because it didn&amp;rsquo;t fullfil me and, for once, I&amp;rsquo;ve decided not to rush-into-the-next-thing. I&amp;rsquo;ve decided that, for the next 4 months, I will encourage my own creativity and see where it brings me. I&amp;rsquo;ll try to &lt;em&gt;build my next thing&lt;/em&gt;. I&amp;rsquo;ve called this period&amp;hellip; the &lt;em&gt;Winter of Output&lt;/em&gt; (inspired by Andy Kong&amp;rsquo;s &lt;a href=&#34;https://andykong.org/projects/yearofoutput/&#34;&gt;Year of Output&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/notes-while-hacking-the-coral/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/notes-while-hacking-the-coral/</guid>
      <description>&lt;h2 id=&#34;intercepting-usb&#34;&gt;Intercepting USB&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I need a way to intercept USB communication that I know is happening (because the Coral is a USB Stick).&lt;/li&gt;
&lt;li&gt;I could try to re-build the runtime library that handles the Coral device. However, re-building is impossible because of outdated build script and conflicting dependencies.&lt;/li&gt;
&lt;li&gt;I have to deal with the &lt;code&gt;libedgetpu.dylib&lt;/code&gt; directly. How can I intercept the information sent over USB?&lt;/li&gt;
&lt;li&gt;With &lt;code&gt;otool&lt;/code&gt; I can see that &lt;code&gt;libedgetpu.dylib&lt;/code&gt; uses &lt;code&gt;libusb.dylib&lt;/code&gt;, which is also installed with it. Can I intercept the methods of &lt;code&gt;libusb.dylib&lt;/code&gt; being called and dump the contents to the console?&lt;/li&gt;
&lt;li&gt;I actually have access to &lt;code&gt;libusb&lt;/code&gt;. I can build a custom version with &lt;code&gt;printf&lt;/code&gt; statements and link &lt;code&gt;libedgetpu.dylib&lt;/code&gt; against my modified version.&lt;/li&gt;
&lt;li&gt;I tried intercepting the symbols directly (&lt;code&gt;dlsym(RTLD_NEXT, &amp;quot;libusb_control_transfer&amp;quot;))&lt;/code&gt;) but it was not so easy to run because I am using the Python bindings instead of the C++ interface.&lt;/li&gt;
&lt;li&gt;I have access to the &lt;code&gt;libedgetpu&lt;/code&gt; source code so I can see what &lt;code&gt;libusb&lt;/code&gt; methods are being used: &lt;code&gt;libusb_control_transfer()&lt;/code&gt;, &lt;code&gt;libusb_bulk_transfer()&lt;/code&gt;,  and &lt;code&gt;libusb_interrupt_transfer()&lt;/code&gt;. Also &lt;code&gt;libusb_submit_transfer&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;analyzing-usb-data&#34;&gt;Analyzing USB Data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;No bulk transfers seen when running the example code.&lt;/li&gt;
&lt;li&gt;Poke &lt;code&gt;libusb_submit_transfer()&lt;/code&gt; which triggers an async USB transfer.&lt;/li&gt;
&lt;li&gt;Each Control Transfer triggers a Submit Transfer (I see both entry methods called in the console prints). It seems that sync. Control Transfers are implemented as &lt;code&gt;type=0&lt;/code&gt; Submit Transfers, type which corresponds to Control Transfers. I suspect that the synchronicity is achieved through a blocking call.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;analyzing-the-structure-of-the-transfer-of-some-data&#34;&gt;Analyzing the Structure of the Transfer of Some Data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The first time the Coral is connected, it shows like a generic device. Only after running some code on it, it shows as Coral on USB.&lt;/li&gt;
&lt;li&gt;Analyzing the intercepted USB data upon a call to &lt;code&gt;edgetpu.load_edgetpu_delegate()&lt;/code&gt;, one can see how &lt;code&gt;apex_latest_single_ep.bin&lt;/code&gt; is sent to the device through Control Transfers. Afterwards, some further transfers take place.&lt;/li&gt;
&lt;li&gt;Some of the transfers are Submit Transfers through interface 0x81, meaning that the Host is sending data back to the Device.&lt;/li&gt;
&lt;li&gt;Comparing the interface load sent data with the data sent when running inference, the structure shows 3 clearly distinct parts: device initialization, image and model transfer and output readout, and device shutdown.&lt;/li&gt;
&lt;li&gt;The shutdown sequence is the same for load firmware and inference run; the setup sequence is not.&lt;/li&gt;
&lt;li&gt;Single inference on Vireo and Macaw only show differences in the data related to the tensor being transferred. They show the same initialization and shutdown patterns, as well as mode weight transfer.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
